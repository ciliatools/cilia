#!/usr/bin/env bash
# This file is part of Cilia.
# 
# Copyright (C) 2016  Mikael Brockman
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -eu
shopt -s nullglob
set -m

project="$1"
commit="$2"
taskname="$3"

read request suffix <<<"$4"
while read assignment; do
  if [ -n "$assignment" ]; then
    eval "export $assignment"
  fi
done <<<"$suffix"


echo; echo; echo; echo; echo; echo; echo
echo === $project $commit $taskname $request $suffix

projectdir="$CILIA_ROOT"/projects/"$project"
commitdir="$projectdir"/commits/"$commit"

function export-variables {
  export CILIA_PROJECT="$project"
  export CILIA_COMMIT="$commit"
  export CILIA_DOMAIN=$(hostname)
  export CILIA_ARTIFACTS="$commitdir"/artifacts
  export CILIA_PROJECT_TREE="$CILIA_ROOT"/projects/"$project"
  export CILIA_WORKTREE="$commitdir"/work
  export CILIA_CONFIG="$commitdir"/config
}

cd "$commitdir"

if [ -s tasks/"$taskname"/status ]; then
  status=$(cat tasks/"$taskname"/status)
else
  status=waiting
fi

shorthash=$(echo $commit | head -c 8)

function log {
  echo ==== $project $shorthash $taskname $@
}

log status: $status

export COMPOSE_PROJECT_NAME=cilia$shorthash
export COMMIT=$commit
export DOMAIN=$(hostname)

function wait-for-process {
  log waiting for pid $1
  while [ -e /proc/$1 ]; do sleep 0.5; done
}

function stop-process {
  log "giving pid $pid an offer it can't refuse"
  if kill $pid; then
    echo cancelling > tasks/"$taskname"/status
    wait-for-process $pid || true
    echo cancelled > tasks/"$taskname"/status
    rm tasks/"$taskname"/pid
  else
    log pid $pid was already gone
    true
  fi
}

function clear-request {
  log clearing the request file
  rm tasks/"$taskname"/request
}

function mark-as-started {
  log marking as started on $(date -Iseconds)
  echo started > tasks/"$taskname"/status
  date +%s > tasks/"$taskname"/started
}

function save-pid {
  pid=$!
  log "saving pid ($pid)"
  echo $pid > tasks/"$taskname"/pid
}

function read-pid {
  pid=$(cat tasks/"$taskname"/pid)
}

function run-task-hook {
  log running task hooks for $1
  "$CILIA_PATH"/run-task-hook \
    "$project" "$commit" "$taskname" "$1"
}

function await-process-death {
  log waiting for pid $pid
  trap stop-process EXIT
  if wait $pid
    then status=succeeded
    else status=failed
  fi
  echo $status > tasks/"$taskname"/status
  run-task-hook $status
}

function clear-pid {
  log clearing pid file
  rm tasks/"$taskname"/pid
}

function mark-as-finished {
  log marking as finished on $(date -Iseconds)
  date +%s > tasks/"$taskname"/finished
}

function run-compose {
  command="$1"
  service=$(cat config/tasks/"$taskname"/service || echo "")
  log running docker-compose $command $service
  stdbuf -o 0 "$CILIA_PATH"/interleave-fds \
    tasks/"$taskname"/log \
    docker-compose -f work/.cilia/docker-compose.yml \
      "$command" $service \
    &
}

function wait-using-curl {
  ( set +m # kill curl when we die
    i=0
    until [[ $i == 20 ]]; do
      i=$((i + 1))
      if curl -I $commit.$(hostname); then
        exit 0
      fi
      sleep 1
    done
    exit 1
  ) >> tasks/"$taskname"/log &
  log waiting for commit proxy
}

function count-started-tasks {
  # Wow, such alignment.
  ( cd "$projectdir"
    grep --recursive      \
         --include status  \
         --exclude-dir work \
         --exclude-dir clone \
         started              |
    grep /tasks/"$taskname"/  |
    wc -l )
}

function check-concurrency-limit {
  if [ -s config/tasks/"$taskname"/concurrency ]; then
    read limit options <<< $(cat config/tasks/"$taskname"/concurrency)
  else
    limit=5 options=""
  fi
  
  count=$(count-started-tasks)
  if [ $count -ge $limit ]; then (
    set -ex
    log concurrency limit exceeded "($count >= $limit)"
    cd "$projectdir"/commits
    if [ "$options" == stop-oldest ]; then
      excess=$(( limit - count + 1 ))
      log stopping oldest $excess

      # Behold this pipeline.
      grep --include status      \
           --exclude-dir work     \
           --exclude-dir clone     \
           -r started              |
      grep /tasks/"$taskname"/     |
      sed -e 's/\/.*//'            | {
        # The input now is a list of commits whose relevant task is started.
        while read hash; do
          # Prepend a column with the epoch timestamp of the started tasks.
          echo $(cat $hash/tasks/"$taskname"/started) $hash
        done
      }                            |
      sort --numeric-sort --key=1  |
      awk '{ print $2 }'           |
      head -n $excess              | {
        # Request stopping of the oldest excess tasks.
        while read hashtostop; do
          # If there is a request, it's probably ours, so just ignore it.
          # This way it should be safe to run this pipeline several times.
          if [ ! -s $hashtostop/tasks/"$taskname"/request ]; then
            log stopping $(echo $hashtostop | head -c 8) due to concurrency limit
            echo stop > $hashtostop/tasks/"$taskname"/request
          fi
        done
      }
    fi
    exit 0
  )
  fi
}

function do-start {
  check-concurrency-limit
  log starting

  export-variables
  case $taskname in
    build | up)
      clear-request
      mark-as-started
      run-compose "$taskname"
      run-task-hook started
      save-pid
      await-process-death
      clear-pid
      mark-as-finished
      ;;

    say)
      clear-request
      mark-as-started
      run-compose run
      run-task-hook started
      save-pid
      await-process-death
      clear-pid
      mark-as-finished
      ;;

    test)
      clear-request
      mark-as-started
      run-compose run
      run-task-hook started
      save-pid
      await-process-death
      clear-pid
      mark-as-finished
      ;;
    
    wait)
      clear-request
      mark-as-started
      wait-using-curl
      run-task-hook started
      save-pid
      await-process-death
      clear-pid
      mark-as-finished
      ;;
    
    *)
      clear-request
      log unknown task type
  esac
}

function do-stop {
  log stopping
  clear-request
  read-pid
  stop-process
  clear-pid
  mark-as-finished
}

case "$request" in
  start)
    case "$status" in
      started | stopping)
        clear-request ; exit ;;
      *) do-start
    esac
    ;;

  stop)
    case "$status" in
      waiting | succeeded | failed)
        clear-request ; exit ;;
      *) do-stop
    esac
    ;;
    
  *) log unknown request
esac

log task request completed
